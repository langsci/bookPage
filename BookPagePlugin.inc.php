<?php

/**
 * @file plugins/generic/bookPage/BookPagePlugin.inc.php
 *
 * Copyright (c) 2016-2020 Language Science Press
 * Distributed under the GNU GPL v2. For full terms see the file docs/COPYING.
 *
 * @class HomePlugin
 */

import('lib.pkp.classes.plugins.GenericPlugin');

class BookPagePlugin extends GenericPlugin {
	/**
	 * Register the plugin.
	 * @param $category string
	 * @param $path string
	 */
	/**
	 * @copydoc Plugin::register()
	 */
	function register($category, $path, $mainContextId = null) {			
		if (parent::register($category, $path, $mainContextId)) {
			if ($this->getEnabled($mainContextId)) {
				HookRegistry::register('TemplateManager::display',array($this, 'handleDisplay'));
				HookRegistry::register('Templates::Catalog::Book::Main', array($this, 'addLangsciContent'));
				//HookRegistry::register('TemplateManager::fetch', array(&$this, 'handleFetch'));
				//HookRegistry::register('Templates::Catalog::Book::Details', array(&$this, 'handleCatalogBookDetails'));				
				//HookRegistry::call($params['name'], array(&$params, $smarty, &$output));
			}
			return true;
		}
		return false;
	}
		
	// 
	function handleDisplay($hookName, $args) {
		$request = $this->getRequest();
		$templateMgr =& $args[0];
		$template =& $args[1];
		//$currentPress = $templateManager->getTemplateVars('currentPress');	
		switch ($template) {
			case 'frontend/pages/book.tpl':
			
				$request = $this->getRequest();
				$context = $request->getContext();			
				$publishedSubmission = $templateMgr->get_template_vars('publishedSubmission');
				$publishedSubmissionId = $publishedSubmission->getId();
				$publication = $templateMgr->get_template_vars('publication');
				
				// DAO to get reviews from database (data generated by catalog entry tab plugin)
				import('plugins.generic.bookPage.BookPageDAO');
				$bookPageDao = new BookPageDAO();
				DAORegistry::registerDAO('BookPageDAO', $bookPageDao);
				$templateMgr->assign('reviewsBySubmission', $bookPageDao->getReviewsBySubmissionId($publishedSubmissionId));				

				// statistics 			
				// get imagePath from plugin settings
				$imagePath = $this->getSetting($context->getId(),'imagePath');
				$statImageExists = false;
				// check if the image path is an url or a local folder path
				if(filter_var($imagePath, FILTER_VALIDATE_URL)!==false){
					// remote check if image exists
					if(@fopen($imagePath.$publishedSubmissionId.'.png', 'r')) $statImageExists = true;
				} else {
					// add basedir to image path
					$baseDir = realpath(__DIR__ . '/../../..');
					// local check if image exists
					if(file_exists(realpath($baseDir.$imagePath.$publishedSubmissionId.'.png'))) $statImageExists = true;
				}
				// assing variables imagePath and statImageExists to the template
				$templateMgr->assign('statImageExists', $statImageExists);
				$templateMgr->assign('imagePath', $imagePath);
				# if pubState plugin is installed show label
				if ($publication->getData('pubState')) {
					$pubStatePlugin = PluginRegistry::getPlugin('generic', 'pubstateplugin');
					$pubStateLabel = $pubStatePlugin->getPubStateLabel($publishedSubmission);
				} else {
					$pubStateLabel = "";
				}
				$templateMgr->assign('pubState', $pubStateLabel);
				$templateMgr->display($this->getTemplateResource('book.tpl'));
				return true;
		}
		return false;
	}
	
	/**
	 * Add langsci specific content to the book page
	 * @param $hookName string
	 * @param $args array
	 */
	function addLangsciContent($hookName, $args){
		$output =& $args[2];
		$request = $this->getRequest();
		$templateMgr = TemplateManager::getManager($request);
		$output .=  $templateMgr->fetch($this->getTemplateResource('additionalContent.tpl'));
		   
		return false;		
	}	
	
/*	
	function handleCatalogBookDetails($hookName, $args) {
		$params =& $args[0];
		$smarty = $args[1];
		$output =& $args[2];
		$output .= "add to book details";
	}
*/
	/**
	 * @copydoc Plugin::manage()
	 */
	function manage($args, $request) {
		$this->import('BookPageSettingsForm');
		switch($request->getUserVar('verb')) {
			case 'settings':
				$settingsForm = new BookPageSettingsForm($this);
				$settingsForm->initData();
				return new JSONMessage(true, $settingsForm->fetch($request));
			case 'save':
				$settingsForm = new BookPageSettingsForm($this);
				$settingsForm->readInputData();
				if ($settingsForm->validate()) {
					$settingsForm->execute();
					$notificationManager = new NotificationManager();
					$notificationManager->createTrivialNotification(
						$request->getUser()->getId(),
						NOTIFICATION_TYPE_SUCCESS,
						array('contents' => __('plugins.generic.bookPage.settings.saved'))
					);
					return new JSONMessage(true);
				}
				return new JSONMessage(true, $settingsForm->fetch($request));
		}
		return parent::manage($args, $request);
	}


	//
	// Implement template methods from GenericPlugin.
	//
	/**
	 * @copydoc Plugin::getActions()
	 */
	function getActions($request, $verb) {
		$router = $request->getRouter();
		import('lib.pkp.classes.linkAction.request.AjaxModal');
		return array_merge(
			$this->getEnabled()?array(
				new LinkAction(
					'settings',
					new AjaxModal(
						$router->url($request, null, null, 'manage', null, array('verb' => 'settings', 'plugin' => $this->getName(), 'category' => 'generic')),
						$this->getDisplayName()
					),
					__('manager.plugins.settings'),
					null
				),
			):array(),
			parent::getActions($request, $verb)
		);
	}
	
	/**
	 * Get context wide setting. If the context or the setting does not exist,
	 * get the site wide setting.
	 * @param $context Context
	 * @param $name Setting name
	 * @return mixed
	 */
	function _getPluginSetting($context, $name) {
		$pluginSettingsDao = DAORegistry::getDAO('PluginSettingsDAO');
		if ($context && $pluginSettingsDao->settingExists($context->getId(), $this->getName(), $name)) {
			return $this->getSetting($context->getId(), $name);
		} else {
			return $this->getSetting(CONTEXT_ID_NONE, $name);
		}
	}	

	/**
	 * @copydoc PKPPlugin::getDisplayName()
	 */
	function getDisplayName() {
		return __('plugins.generic.bookPage.displayName');
	}

	/**
	 * @copydoc PKPPlugin::getDescription()
	 */
	function getDescription() {
		return __('plugins.generic.bookPage.description');
	}	
}

?>
